"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Core that is responsible for holding a set of testers
 */
class Core {
    /**
     * Construct core with testers
     * @param   testers  Set of tester this core will use for validation
     */
    constructor(...testers) {
        this.locale = 'en-US';
        this.testers = [];
        this.errors = [];
        this.addTesters(...testers);
    }
    /**
     * Set the locale that will be passed to testers
     * @param locale The locale to set
     */
    setLocale(locale) {
        this.locale = locale;
    }
    /**
     * Validates a single value against this core's testers
     * @param value The value to validate
     * @returns     True if the value passes
     */
    validate(value) {
        // Clear the current errors
        // We set the length to 0 because others might have a reference to them which we do not want to dangle
        this.errors.length = 0;
        for (const tester of this.testers) {
            const result = tester(value, this.locale);
            if (result instanceof Array) {
                this.errors.push(...result);
            }
            else if ('string' === typeof result) {
                this.errors.push(result);
            }
        }
        return 0 === this.errors.length;
    }
    /**
     * Gets all the errors of the last [[validate]] run
     * @returns An array of errors
     */
    getErrors() {
        return this.errors;
    }
    /**
     * Allows the adding of new testers. Duplicates that are already
     * added will be ignored.
     * @param testersAdd Testers to add
     */
    addTesters(...testersAdd) {
        const testersNew = testersAdd.filter(testerAdd => -1 === this.testers.indexOf(testerAdd));
        this.testers.push(...testersNew);
    }
    /**
     * Allows the removing of testers attached to core.
     * @param testersRemove Testers to remove
     */
    removeTesters(...testersRemove) {
        this.testers = this.testers.filter(tester => -1 === testersRemove.indexOf(tester));
    }
    /**
     * Removes all the testers attached to core
     */
    removeAllTesters() {
        this.testers = [];
    }
}
exports.Core = Core;
